BN(inp, mapCount, bValue, scValue, bnTimeConst)
[
    b = Parameter(mapCount, 1, init = fixedValue, value = bValue)
    sc = Parameter(mapCount, 1, init = fixedValue, value = scValue)
    m = Parameter(mapCount, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    isd = Parameter(mapCount, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    
    y = BatchNormalization(inp, sc, b, m, isd, spatial = true, normalizationTimeConstant = bnTimeConst, epsilon = 0.000000001, imageLayout = "cudnn")
]

DNNSigmoidLayer(inDim, outDim, x, parmScale) = [
    W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale) 
    b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale) 
    t = Times(W, x)
    z = Plus(t, b)
    y = Sigmoid(z)
]

DNNTanhLayer(x, inDim, outDim, parmScale) = [
    W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale) 
    b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale) 
    t = Times(W, x)
    z = Plus(t, b)
    y = Tanh(z)
]

DNNLayer(x, inDim, outDim, parmScale) = [
    W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale)
    b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale)
    t = Times(W, x)
    z = Plus(t, b)
]

DnnBNReLULayer(inDim, outDim, x, wScale, bValue, scValue, expAvg) = [
    W = Parameter(outDim, inDim, init = Gaussian, initValueScale = wScale) 
    b = Parameter(outDim, 1, init = fixedValue, value = bValue) 
    sc = Parameter(outDim, 1, init = fixedValue, value = scValue) 
    m = Parameter(outDim, 1, init = fixedValue, value = 0, needGradient = false)
    isd = Parameter(outDim, 1, init = fixedValue, value = 0, needGradient = false)
    t = Times(W, x)
    bn = BatchNormalization(t, sc, b, m, isd, eval = false, spatial = false, expAvgFactor = expAvg)
    y = RectifiedLinear(bn)
]

ConvLayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [
    convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale)
    convB = ImageParameter(1, 1, outMap,     init="fixedValue", value=bValue, imageLayout="cudnn")
#    convB = Parameter(outMap, 1, init=fixedValue, value=bValue)
    conv = Convolution(convW, inp, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout="cudnn")
    act = Plus(conv, convB);
#    act = RectifiedLinear(convPlusB);
]

ConvLayer2(inp, outMap, inWCount, w, h, kW, kH, hStride, vStride, wScale, bValue) = [
    convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale)
    b = ImageParameter(w, h, outMap,     init="fixedValue", value=bValue, imageLayout="cudnn")
    conv = Convolution(convW, inp, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout="cudnn")
    act = Plus(conv, b);
#    act = RectifiedLinear(convPlusB);
]

ConvReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [
    convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale)
#    convB = ImageParameter(1, 1, outMap,     init="fixedValue", value=bValue, imageLayout=$imageLayout$)
    convB = ImageParameter(1, 1, outMap,     init="fixedValue", value=bValue, imageLayout="cudnn")
#    convB = Parameter(outMap, 1, init=fixedValue, value=bValue)
#    conv = Convolution(convW, inp, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout=$imageLayout$)
    conv = Convolution(convW, inp, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout="cudnn")
    convPlusB = Plus(conv, convB);
    act = RectifiedLinear(convPlusB);
]

ConvBNLayerW(W, inp, outMap, kW, kH, hStride, vStride, bValue, scValue, expAvg) = [
    b = Parameter(outMap, 1, init=fixedValue, value=bValue)
    sc = Parameter(outMap, 1, init=fixedValue, value=scValue)
    m = Parameter(outMap, 1, init=fixedValue, value=0, needGradient=false)
    isd = Parameter(outMap, 1, init=fixedValue, value=0, needGradient=false)
    
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout="cudnn")
    y = BatchNormalization(c, sc, b, m, isd, eval=false, spatial=true, expAvgFactor=expAvg, imageLayout="cudnn")
]

ConvBNLayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, expAvg) = [
    W = Parameter(outMap, inWCount, init=Gaussian, initValueScale=wScale)
    c = ConvBNLayerW(W, inp, outMap, kW, kH, hStride, vStride, bValue, scValue, expAvg)
]

ConvBNReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, expAvg) = [
    c = ConvBNLayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, expAvg)
    y = RectifiedLinear(c)
]

BNReLUConvLayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, expAvg) = [
    W = Parameter(outMap, inWCount, init=Gaussian, initValueScale=wScale)
    b = Parameter(outMap, 1, init=fixedValue, value=bValue)
    sc = Parameter(outMap, 1, init=fixedValue, value=scValue)
    m = Parameter(outMap, 1, init=fixedValue, value=0, needGradient=false)
    isd = Parameter(outMap, 1, init=fixedValue, value=0, needGradient=false)
    
    bn = BatchNormalization(inp, sc, b, m, isd, eval=false, spatial=true, expAvgFactor=expAvg, imageLayout="cudnn")
    r = RectifiedLinear(bn)
    c = Convolution(W, r, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout="cudnn")
]

ConvBNReLULayerRes(inp, outMap, inC, kW, kH, hStride, vStride, wScale, bValue, scValue, expAvg) = [
    W = Parameter(outMap, inC, init=Gaussian, initValueScale=wScale)
    b = Parameter(outMap, 1, init=fixedValue, value=bValue)
    sc = Parameter(outMap, 1, init=fixedValue, value=scValue)
    m = Parameter(outMap, 1, init=fixedValue, value=0, needGradient=false)
    isd = Parameter(outMap, 1, init=fixedValue, value=0, needGradient=false)
    
    bn = BatchNormalization(inp, sc, b, m, isd, eval=false, spatial=true, expAvgFactor=expAvg, imageLayout="cudnn")
    r = RectifiedLinear(bn)
    y = Convolution(W, r, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout="cudnn")
]


Conv1x1(inp, outMap, inMap, hStride, vStride, wScale, bValue, scValue, bnTimeConst)
[
    W = Parameter(outMap, inMap, init = Gaussian, initValueScale = wScale)
    c = Convolution(W, inp, 1, 1, outMap, hStride, vStride, zeroPadding = false, imageLayout = "cudnn")
    y = BN(c, outMap, bValue, scValue, bnTimeConst)
]

Conv1x1ReLU(inp, outMap, inMap, hStride, vStride, wScale, bValue, scValue, bnTimeConst)
[
    c = Conv1x1(inp, outMap, inMap, hStride, vStride, wScale, bValue, scValue, bnTimeConst)
    y = RectifiedLinear(c)
]

ResNetNode2(inp, outMap, inC, inWCount, wScale, bValue, scValue, bnTimeConst)
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)
    # Second convolution layer, no ReLU.
    c2 = ConvBNLayer(c1, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)
    p = Plus(c2, inp)
    y = RectifiedLinear(p)
]


ResNetNode2a(inp, outMap, inC, inWCount, wScale, bValue, scValue, bnTimeConst)
[
    # First convolution layer.
    c1 = BNReLUConvLayer(inp, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)
    # Second convolution layer, no ReLU.
    c2 = BNReLUConvLayer(c1, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)
    p = Plus(c2, inp)
]

ResNetNode2NBN(inp, outMap, inC, inWCount, wScale, bValue)
[
    # First convolution layer.
    c1 = ConvReLULayer(inp, outMap, inWCount, 3, 3, 1, 1, wScale, bValue)
    # Second convolution layer, no ReLU.
    c2 = ConvLayer(c1, outMap, inWCount, 3, 3, 1, 1, wScale, bValue)
    p = Plus(c2, inp)
    y = RectifiedLinear(p)
]

ResNetNode2P(inp, outMap, inC, inWCount, wScale, bValue, scValue, bnTimeConst)
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)
    # Second convolution layer, no ReLU.
    c2 = ConvBNLayer(c1, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)

	# Pool
    d1 = ConvBNReLULayer(inp, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)
	d1p = Pooling(d1, "max", {2, 2, 1}, stride={1, 1, 1}, autoPadding = {true, true, false}, imageLayout = "cudnn")
    d2 = ConvBNLayer(d1p, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)
	d2p = Pooling(d2, "max", {2, 2, 1}, stride={1, 1, 1}, autoPadding = {true, true, false}, imageLayout = "cudnn")

    p = Plus(c2, inp)
	p2 = Plus(p, d2p)
    y = RectifiedLinear(p2)
]

# Bottleneck building block for ResNet.
ResNetNode3A(inp, inMap, convMap, outMap, convWCount, wScale, bValue, scValue, bnTimeConst)
[
    # 1x1 reducing convolution.
    c1 = Conv1x1ReLU(inp, convMap, inMap, 1, 1, wScale, bValue, scValue, bnTimeConst)
    # 3x3 convolution.
    c2 = ConvBNReLULayer(c1, convMap, convWCount, 3, 3, 1, 1, wScale, bValue, scValue, bnTimeConst)
    # 1x1 expanding convolution, no ReLU.
    c3 = Conv1x1(c2, outMap, convMap, 1, 1, wScale, bValue, scValue, bnTimeConst)
    
    p = Plus(c3, inp)
    y = RectifiedLinear(p)
]

ResNetNode(inp, outMap, inC, inWCount, wScale, bValue, scValue, expAvg)
[
    # 3x3
    c1 = ConvBNReLULayerRes(inp, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, expAvg)
    # 3x3
    c2 = ConvBNReLULayerRes(c1, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, expAvg)

    p = Plus(c2, inp)
]

ResNetBNode(inp, outMap, bottleneckC, bottleneckCount, inC, inWCount, wScale, bValue, scValue, expAvg)
[
    # 1x1
    c1 = ConvBNReLULayerRes(inp, bottleneckC, inC, 1, 1, 1, 1, wScale, bValue, scValue, expAvg)
    # 3x3
    c2 = ConvBNReLULayerRes(c1, bottleneckC, bottleneckCount, 3, 3, 1, 1, wScale, bValue, scValue, expAvg)
	# 1x1
    c3 = ConvBNReLULayerRes(c2, outMap, bottleneckC, 1, 1, 1, 1, wScale, bValue, scValue, expAvg)
    p = Plus(c3, inp)
    y = RectifiedLinear(p)
]

ProjLayer(W, inp, outMap)
[    
    y = Convolution(W, inp, 1, 1, outMap, 1, 1, zeroPadding = false, imageLayout = "cudnn")
]

ResNetNodeInc(inp, outMap, inC, inWCount, wScale, bValue, scValue, expAvg)
[
    # 3x3
    c1 = ConvBNReLULayerRes(inp, inC, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, expAvg)
    # 3x3
    c2 = ConvBNReLULayerRes(c1, outMap, inWCount, 3, 3, 1, 1, wScale, bValue, scValue, expAvg)
	
    # Projection convolution layer.
    Wproj = Parameter(outMap, inC, init=Gaussian)
    c_proj = ProjLayer(Wproj, inp, outMap)

    p = Plus(c2, c_proj)
]

ResNetBNodeInc(inp, outMap, bottleneckC, bottleneckCount, inC, inWCount, wScale, bValue, scValue, expAvg)
[
    # 1x1
    c1 = ConvBNReLULayerRes(inp, bottleneckC, inC, 1, 1, 1, 1, wScale, bValue, scValue, expAvg)
    # 3x3
    c2 = ConvBNReLULayerRes(c1, bottleneckC, bottleneckCount, 3, 3, 1, 1, wScale, bValue, scValue, expAvg)
	# 1x1
    c3 = ConvBNReLULayerRes(c2, outMap, bottleneckC, 1, 1, 1, 1, wScale, bValue, scValue, expAvg)
	
    # Projection convolution layer.
    Wproj = Parameter(outMap, inC, init=Gaussian)
    c_proj = ProjLayer(Wproj, inp, outMap)

    p = Plus(c3, c_proj)
    #y = RectifiedLinear(p)
]
